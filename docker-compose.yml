services:
    postgres:
        container_name: delivery-ms-postgres
        image: postgres
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            PGDATA: /var/lib/postgresql/data/pgdata
        volumes:
            - postgres:/var/lib/postgresql/data
            # - ./init-multiple-dbs.sql:/docker-entrypoint-initdb.d/init-multiple-dbs.sql
        ports:
            - 5432:5432
        networks:
            - delivery-microservices-network
        restart: unless-stopped
        #healthcheck:
        #test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
        #interval: 10s
        #timeout: 5s
        #retries: 5

    pgadmin:
        container_name: delivery-ms-pgadmin
        image: dpage/pgadmin4
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
            PGADMIN_CONFIG_SERVER_MODE: "False"
        volumes:
            - pgadmin:/var/lib/pgadmin
        ports:
            - 5050:80
        networks:
            - delivery-microservices-network
        restart: unless-stopped

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        container_name: delivery-ms-zookeeper
        environment:
            ZOOKEEPER_SERVER_ID: 1
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - 22181:2181
        networks:
            - delivery-microservices-network

    kafka:
        image: confluentinc/cp-kafka:latest
        container_name: delivery-ms-kafka
        ports:
            - "9092:9092"
        depends_on:
            - zookeeper
        environment:
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
            KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
        networks:
            - delivery-microservices-network
        # healthcheck:
        # test: ["CMD-SHELL", "echo > /dev/tcp/localhost/9092"]
        # interval: 10s
        #  timeout: 5s
        # retries: 5

    mail-dev:
        container_name: delivery-ms-mail-dev
        image: maildev/maildev
        ports:
            - 1080:1080
            - 1025:1025

    zipkin:
        container_name: delivery-ms-zipkin
        image: openzipkin/zipkin
        ports:
            - 9411:9411
        networks:
            - delivery-microservices-network

    keycloak:
        container_name: delivery-ms-keycloak
        image: quay.io/keycloak/keycloak:24.0.2
        ports:
            - 9098:8080
        environment:
            KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
            KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
        networks:
            - delivery-microservices-network
        command:
            - "start-dev"

    # configuration-server:
    # build:
    # context: ./services/configuration-server
    # image: configuration-server
    # ports:
    # - 8888:8888
    # environment:
    #  SPRING_PROFILES_ACTIVE: native
    # EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
    # EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
    # networks:
    # - delivery-microservices-network
    # healthcheck:
    # test: ["CMD", "curl", "-f", "http://configuration-server:8888/actuator/health"]
    # interval: 10s
    # timeout: 10s
    # retries: 5
    # start_period: 20s

    # discovery-server:
    # build:
    # context: ./services/discovery-server
    # image: discovery-server
    # ports:
    # - "8761:8761"
    # environment:
    # SPRING_PROFILES_ACTIVE: native
    # EUREKA_INSTANCE_HOSTNAME: discovery-server
    # EUREKA_CLIENT_REGISTER_WITH_EUREKA: false
    # EUREKA_CLIENT_FETCH_REGISTRY: false
    # EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
    # EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
    # SPRING_CONFIG_IMPORT: optional:configserver:http://configuration-server:8888
    # SPRING_CLOUD_CONFIG_URI:
    # networks:
    # - delivery-microservices-network
    # depends_on:
    # configuration-server:
    # condition: service_healthy
    # healthcheck:
    # test: ["CMD", "curl", "-f", "http://discovery-server:8761/actuator/health"]
    # interval: 10s
    # timeout: 10s
    # retries: 5
    # start_period: 30s

    # apigateway-server:
    # build:
    # context: ./services/apigateway
    # image: apigateway-server
    # ports:
    # - "8222:8222"
    # environment:
    # SPRING_PROFILES_ACTIVE: native
    # SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/delivery-microservice
    # SPRING_CLOUD_DISCOVERY_LOCATOR_ENABLED: "true"
    # EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
    # EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
    # networks:
    # - delivery-microservices-network
    # depends_on:
    # configuration-server:
    # condition: service_healthy
    # discovery-server:
    # condition: service_healthy

    # customer-server:
    # build:
    # context: ./services/customer-server
    # image: customer-server
    # ports:
    # - 8090:8090
    # environment:
    # SPRING_PROFILES_ACTIVE: native
    # SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/customerdb
    # SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
    # SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    # SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: kafka:9092
    # EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
    # EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
    # networks:
    # - delivery-microservices-network
    # depends_on:
    # postgres:
    # condition: service_healthy
    # kafka:
    # condition: service_healthy
    # configuration-server:
    # condition: service_healthy
    # discovery-server:
    # condition: service_healthy

    # restaurant-server:
    # build:
    # context: ./services/restaurant-server
    # image: restaurant-server
    # ports:
    # - 8050:8050
    # environment:
    # SPRING_PROFILES_ACTIVE: native
    # SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/restaurantdb
    # SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
    # SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    # EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
    # EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
    # EUREKA_INSTANCE_HOSTNAME: restaurant-server
    # SPRING_APPLICATION_NAME: restaurant-service
    # SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: kafka:9092
    # networks:
    # - delivery-microservices-network
    # depends_on:
    # postgres:
    # condition: service_healthy
    # configuration-server:
    # condition: service_healthy
    # discovery-server:
    # condition: service_healthy

networks:
    delivery-microservices-network:
        driver: bridge

volumes:
    postgres:
    pgadmin:
