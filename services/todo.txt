1. payment database only storing one ID! - fix!
2. add endpoints for customer to view their orders & payment history.
3. add stripe and add a little front end for it.
4. add redis for caching
5. you can purchase from one restaurant with a cuisine from another. fix this.



Notification Service
Handles notifications (e.g., order confirmations, delivery updates) via various channels such as SMS, email, or push notifications.
This can also integrate with Kafka to listen for events and send notifications accordingly.]

Inventory/Stock Management Service:
Useful if restaurants track stock levels for ingredients or menu items. This service can ensure items are available before confirming an order.

Analytics/Reporting Service:
Tracks user behavior, order trends, and sales reports. It can provide insights into popular menu items, peak ordering times, and other business metrics.

User Profile Service:
Manages customer data such as addresses, preferences, and saved payment methods. This service can ensure personalized experiences and easy reordering.

Recommendation Service: Provides personalized or popular item recommendations to users based on their past orders or general trends.

Technologies to implement:
ELK Stack (Elasticsearch, Logstash, Kibana):
For centralized logging and monitoring, the ELK stack is invaluable. It allows you to gather logs from different services, analyze them, and visualize them for insights. Kibana dashboards make monitoring straightforward.

Grafana & Prometheus:
These tools are commonly used for metrics monitoring and alerting. Prometheus scrapes metrics, and Grafana provides visual dashboards. They are essential for understanding service health and resource utilization.

Redis or Memcached:
Adding caching to your microservices can significantly improve response times and reduce load on downstream services or databases. Redis, for example, is widely used for caching session data or frequently accessed information.